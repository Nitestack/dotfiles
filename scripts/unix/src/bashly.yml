---
name: dotfiles
help: CLI tool for managing dotfiles with chezmoi
version: 0.1.0

dependencies:
  chezmoi: Visit 'https://www.chezmoi.io/install' to install chezmoi
  git: Visit 'https://git-scm.com/downloads' to install git

commands:
  - name: completion
    help: Shell to generate completion
  - name: download
    help: Download dotfiles from the internet
    args:
      - name: target
        help: Target directory to download to
        default: ~/.dotfiles
    flags:
      - long: --repo
        short: -r
        help: Repo to download from
        arg: "repo"
        default: Nitestack/dotfiles
      - long: --branch
        short: -b
        help: Branch to download from
        arg: "branch"
        default: master
      - long: --ssh
        help: Use SSH instead of HTTPS
  - name: install
    help: Install dotfiles with chezmoi
    args:
      - name: sourceDir
        help: Source directory of dotfiles
        default: ~/.dotfiles
    flags:
      - long: --one-shot
        help: Attempts to install your dotfiles with chezmoi and then remove all traces of chezmoi from the system. This is useful for setting up temporary environments (e.g. Docker containers).
  - name: update
    dependencies:
      nvim: Run 'bob install stable' (or 'bob install nightly' for the nightly release of Neovim) (note that this requires `bob` to be installed)
      bob: Run 'pacman -S bob' if you are on Arch Linux or otherwise 'cargo install bob-nvim' to install bob (note that this requires `cargo` to be installed)
    help: Update dotfiles with chezmoi
    flags:
      - long: --refresh-externals
        short: -R
        help: Refresh external cache. This defaults to auto.
        arg: "option"
        allowed:
          - "always"
          - "auto"
          - "never"
        default: auto
      - long: --local
        short: -l
        help: Apply local changes with `chezmoi apply`.
      - long: --cli
        help: Update the CLI itself. This defaults to false.
      - long: --nvim
        help: Update Neovim plugins, Mason packages and sync lazy-lock.json file if it exists.
  - name: edit
    help: Edit dotfiles
    args:
      - name: target
        help: Target file to edit
        default: ""
        validate: file_exists
    flags:
      - long: --neovide
        short: -n
        help: Use Neovide (Neovim GUI) instead of Neovim
      - long: --apply
        short: -a
        help: Apply target immediately after editing. Ignored if there are no targets.
      - long: --hardlink
        arg: "bool"
        allowed:
          - "true"
          - "false"
        help: Invoke the editor with a hard link to the source file with a name matching the target filename. This can help the editor determine the type of the file correctly. This is the default.
      - long: --watch
        short: -w
        help: Automatically apply changes when files are saved
