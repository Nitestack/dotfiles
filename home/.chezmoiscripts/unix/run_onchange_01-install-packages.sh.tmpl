#!/usr/bin/env bash

# {{ template "bash-library.sh" . }}

# The following line is for ShellCheck to correctly identify the above included library
true || source "../../.chezmoitemplates/bash-library.sh"

# ╭──────────────────────────────────────────────────────────╮
# │ Note: Any brew related packages for macOS are handled    │
# │ already, check the custom mac scripts                    │
# ╰──────────────────────────────────────────────────────────╯

# ╭──────────────────────────────────────────────────────────╮
# │ Install essentials                                       │
# ╰──────────────────────────────────────────────────────────╯
start_task "Installing essential packages"

# {{ $osid := .osid }}
# {{ $os := .chezmoi.os }}
# {{ $essentialPackages := list }}
# {{ $essentialCustomPackages := list }}
# {{ range .packages.essentials }}
#   {{ if and (eq $osid "linux-arch") (hasKey . "arch") }}
#     {{ if eq "string" (printf "%T" .arch) }}
#       {{ $essentialPackages = mustAppend $essentialPackages .arch }}
#     {{ else if .arch.custom }}
#       {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .arch.custom) }}
#     {{ end }}
#   {{ else if and (eq $os "darwin") (and (hasKey . "mac") .mac.custom) }}
#     {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .mac.custom) }}
#   {{ else if hasKey . "custom" }}
#     {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .custom) }}
#   {{ end }}
# {{ end }}

# {{ if eq $osid "linux-arch"}}
# ── pacman ────────────────────────────────────────────────────────────
echo
echo "pacman:"
paru -Syu
sudo pacman -S --needed --noconfirm "{{- $essentialPackages | join "\" \""  -}}"
# {{ end }}

# ── custom ────────────────────────────────────────────────────────────
echo
echo "custom:"
# {{ range $essentialCustomPackages }}
# {{ range $cmd_name, $lines := . }}
install_custom_cmd() {
	if command -v "{{- $cmd_name -}}" &>/dev/null; then
		echo "{{- $cmd_name -}}"
		exit 2
	else
		# {{ "\n" }} {{ $lines }}
	fi
}
show_spinner "install_custom_cmd" "{{- $cmd_name -}}" "{{- $cmd_name -}}"
# {{ end }}
# {{ end }}

# ── volta ─────────────────────────────────────────────────────────────
echo
echo "volta:"
volta_list=$(volta list --format plain)
# {{ range (.packages.volta | uniq) }}
install_with_volta() {
	if echo "${volta_list}" | grep -q "{{- . -}}"; then
		echo "{{- . -}}"
		exit 2
	else
		volta install "{{- . -}}"
	fi
}
show_spinner "install_with_volta" "{{- . -}}" "{{- . -}}"
# {{ end }}

complete_task "Installed essential packages"

# ╭──────────────────────────────────────────────────────────╮
# │ Install packages                                         │
# ╰──────────────────────────────────────────────────────────╯
start_task "Installing packages"

# {{ $packages := list }}
# {{ $customPackages := list }}
# {{ range .packages.common }}
#   {{ if and (eq $osid "linux-arch") (hasKey . "arch") }}
#     {{ if eq "string" (printf "%T" .arch) }}
#       {{ $packages = mustAppend $packages .arch }}
#     {{ else if .arch.custom }}
#       {{ $customPackages = mustAppend $customPackages (dict .name .arch.custom) }}
#     {{ end }}
#   {{ else if and (eq $os "darwin") (and (hasKey . "mac") .mac.custom) }}
#     {{ $customPackages = mustAppend $customPackages (dict .name .mac.custom) }}
#   {{ else if hasKey . "custom" }}
#     {{ $customPackages = mustAppend $customPackages (dict .name .custom) }}
#   {{ end }}
# {{ end }}

# {{ if eq $osid "linux-arch" }}
# ── pacman ────────────────────────────────────────────────────────────
echo
echo "pacman:"
sudo pacman -S --needed --noconfirm "{{- concat $packages .packages.arch.pacman | uniq | sortAlpha | join "\" \""  -}}"

# ── paru ───────────────────────────────────────────────────────────────
echo
echo "paru:"
paru -S --needed --noconfirm "{{- .packages.arch.paru | uniq | sortAlpha | join "\" \""  -}}"
# {{ end }}

# ── custom ────────────────────────────────────────────────────────────
echo
echo "custom:"
# {{ range $customPackages }}
# {{ range $cmd_name, $lines := . }}
install_custom_cmd() {
	if command -v "{{- $cmd_name -}}" &>/dev/null; then
		echo "{{- $cmd_name -}}"
		exit 2
	else
		# {{ "\n" }}{{ $lines }}
	fi
}
show_spinner "install_custom_cmd" "{{- $cmd_name -}}" "{{- $cmd_name -}}"
# {{ end }}
# {{ end }}

# ── pnpm ──────────────────────────────────────────────────────────────
echo
echo "npm:"
pnpm_list=$(pnpm list -g --depth 0)
# {{ range (.packages.npm | uniq | sortAlpha) }}
install_with_pnpm() {
	if echo "${pnpm_list}" | grep -q "{{- . -}}"; then
		echo "{{- . -}}"
		exit 2
	else
		pnpm add -g "{{- . -}}"
	fi
}
show_spinner "install_with_pnpm" "{{- . -}}" "{{- . -}}"
# {{ end }}

# ── cargo ─────────────────────────────────────────────────────────────
echo
echo "cargo:"
cargo_list=$(cargo install --list)
# {{ range (.packages.cargo | uniq | sortAlpha) }}
install_with_cargo() {
	if echo "${cargo_list}" | grep -q "{{- . -}}"; then
		echo "{{- . -}}"
		exit 2
	else
		cargo install "{{- . -}}"
	fi
}
show_spinner "install_with_cargo" "{{- . -}}" "{{- . -}}"
# {{ end }}
echo

complete_task "Installed packages"
