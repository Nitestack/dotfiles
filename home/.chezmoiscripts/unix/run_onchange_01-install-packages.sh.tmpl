#!/usr/bin/env bash

# {{ template "bash-library.sh" . }}

# The following line is for ShellCheck to correctly identify the above included library
true || source "../../.chezmoitemplates/bash-library.sh"

# ╭──────────────────────────────────────────────────────────╮
# │ Note: Any brew related packages for macOS are handled    │
# │ already, check the custom mac scripts                    │
# ╰──────────────────────────────────────────────────────────╯

# ╭──────────────────────────────────────────────────────────╮
# │ Install essentials                                       │
# ╰──────────────────────────────────────────────────────────╯
_log_header "Essential Packages"

# {{ $osid := .osid }}
# {{ $os := .chezmoi.os }}
# {{ $essentialPackages := list }}
# {{ $essentialCustomPackages := list }}
# {{ range .packages.essentials }}
#   {{ if and (eq $osid "linux-arch") (hasKey . "arch") }}
#     {{ if eq "string" (printf "%T" .arch) }}
#       {{ $essentialPackages = mustAppend $essentialPackages .arch }}
#     {{ else if hasKey .arch "custom" }}
#       {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .arch.custom) }}
#     {{ end }}
#   {{ else if and (eq $os "darwin") (and (hasKey . "mac") (hasKey .mac "custom")) }}
#     {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .mac.custom) }}
#   {{ else if hasKey . "custom" }}
#     {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .custom) }}
#   {{ end }}
# {{ end }}

# {{ if eq $osid "linux-arch"}}
# ── pacman ────────────────────────────────────────────────────────────
gum format -- "## pacman:"
paru -Syu
_install_packages_pacman "{{- $essentialPackages | join "\" \""  -}}"
# {{ end }}

# ── custom ────────────────────────────────────────────────────────────
gum format -- "## custom:"
# {{ range $essentialCustomPackages }}
# {{ range $cmd_name, $lines := . }}
if command -v "{{- $cmd_name -}}" &>/dev/null; then
	_log -l warn "{{- $cmd_name }} is already installed"
else
	# {{ "\n" }} {{ $lines }}
	_log -l info "Installed {{ $cmd_name -}}"
fi
# {{ end }}
# {{ end }}

# ── volta ─────────────────────────────────────────────────────────────
gum format -- "## volta:"
volta_list=$(volta list --format plain)
# {{ range (.packages.volta | uniq) }}
if echo "${volta_list}" | grep -q "{{- . -}}"; then
	_log -l warn --prefix "volta" "{{- . }} is already installed"
else
	volta install "{{- . -}}"
	_log -l info --prefix "volta" "Installed {{ . -}}"
fi
# {{ end }}

echo
_log -l info "Installed essential packages"

# ╭──────────────────────────────────────────────────────────╮
# │ Install packages                                         │
# ╰──────────────────────────────────────────────────────────╯
_log_header "Packages"

# {{ $packages := list }}
# {{ $paruPackages := list }}
# {{ $customPackages := list }}
# {{ range .packages.common }}
#   {{ if and (eq $osid "linux-arch") (hasKey . "arch") }}
#     {{ if eq "string" (printf "%T" .arch) }}
#       {{ $packages = mustAppend $packages .arch }}
#     {{ else if hasKey .arch "paru" }}
#       {{ $paruPackages = mustAppend $paruPackages .arch.paru }}
#     {{ else if hasKey .arch "custom" }}
#       {{ $customPackages = mustAppend $customPackages (dict .name .arch.custom) }}
#     {{ end }}
#   {{ else if and (eq $os "darwin") (and (hasKey . "mac") (hasKey .mac "custom")) }}
#     {{ $customPackages = mustAppend $customPackages (dict .name .mac.custom) }}
#   {{ else if hasKey . "custom" }}
#     {{ $customPackages = mustAppend $customPackages (dict .name .custom) }}
#   {{ end }}
# {{ end }}

# {{ if eq $osid "linux-arch" }}
# If icon theme installation is specified, install it
# {{ if hasKey .gtk.icon.theme "install" }}
#   {{ if hasKey .gtk.icon.theme.install "pacman" }}
#     {{ $packages = mustAppend $packages .gtk.icon.theme.install.pacman }}
#   {{ else if hasKey .gtk.icon.theme.install "paru" }}
#     {{ $paruPackages = mustAppend $paruPackages .gtk.icon.theme.install.paru }}
#   {{ end }}
# {{ end }}

# If cursor theme installation is specified, install it
# {{ if hasKey .gtk.cursor.theme "install" }}
#   {{ if hasKey .gtk.cursor.theme.install "pacman" }}
#     {{ $packages = mustAppend $packages .gtk.cursor.theme.install.pacman }}
#   {{ else if hasKey .gtk.cursor.theme.install "paru" }}
#     {{ $paruPackages = mustAppend $paruPackages .gtk.cursor.theme.install.paru }}
#   {{ end }}
# {{ end }}

# ── pacman ────────────────────────────────────────────────────────────
gum format -- "## pacman:"
_install_packages_pacman "{{- concat $packages .packages.arch.pacman | uniq | sortAlpha | join "\" \"" -}}"

# ── paru ───────────────────────────────────────────────────────────────
gum format -- "## paru:"
_install_packages_paru "{{- concat $paruPackages .packages.arch.paru | uniq | sortAlpha | join "\" \"" -}}"
# {{ end }}

# ── custom ────────────────────────────────────────────────────────────
gum format -- "## custom:"
# {{ range $customPackages }}
# {{ range $cmd_name, $lines := . }}
if command -v "{{- $cmd_name -}}" &>/dev/null; then
	_log -l warn "{{- $cmd_name }} is already installed"
else
	# {{ "\n" }} {{ $lines }}
	_log -l info "Installed {{ $cmd_name -}}"
fi
# {{ end }}
# {{ end }}

# ── pnpm ──────────────────────────────────────────────────────────────
gum format -- "## pnpm:"
pnpm_list=$(pnpm list -g --depth 0)
# {{ range (.packages.npm | uniq | sortAlpha) }}
if echo "${pnpm_list}" | grep -q "{{- . -}}"; then
	_log -l warn --prefix "pnpm" "{{- . }} is already installed"
else
	pnpm add -g "{{- . -}}"
	_log -l info --prefix "pnpm" "Installed {{ . -}}"
fi
# {{ end }}

# ── cargo ─────────────────────────────────────────────────────────────
gum format -- "## cargo:"
cargo_list=$(cargo install --list)
# {{ range (.packages.cargo | uniq | sortAlpha) }}
if echo "${cargo_list}" | grep -q "{{- . -}}"; then
	_log -l warn --prefix "cargo" "{{- . }} is already installed"
else
	cargo install "{{- . -}}"
	_log -l info --prefix "cargo" "Installed {{ . -}}"
fi
# {{ end }}

echo
_log -l info "Installed packages"
