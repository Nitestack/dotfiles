# {{ template "pwsh-library.ps1" . }}

if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator'))
{
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000)
  {
    $CommandLine = "-File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath pwsh -Verb Runas -ArgumentList $CommandLine
    Exit
  }
}

# Install winget packages
# {{ range $_, $package_name := concat .dependencies.windows.winget }}
Invoke-WingetEnsureInstalled "{{- $package_name -}}"
# {{ end }}

# Install choco packages
# {{ range $_, $package_name := concat .dependencies.windows.choco .dependencies.all.packages }}
Invoke-ChocoEnsureInstalled "{{- $package_name -}}"
# {{ end }}

# Custom installation
# {{ range $_, $pkg := concat .dependencies.windows.custom .dependencies.all.custom }}
# {{ range $cmd_name, $to_install := $pkg }}
if (Get-Command "{{- $cmd_name -}}" -ErrorAction SilentlyContinue)
{
  Write-LogInfo "{{- $cmd_name | squote }} is already installed. Skipping."
} else
{
  Write-LogTask "Installing {{ $cmd_name | squote -}}"
  # {{ range $_, $line := $to_install }}
  # {{ "\n" }} Invoke-CommandExpression {{ $line | quote }}
  # {{ end }}
}
# {{ end }}
# {{ end }}

# Global npm dependencies
$pnpmList = pnpm list -g --depth 0
# {{ range $_, $package_name := .dependencies.all.pnpm }}
if ($pnpmList -match "{{- $package_name -}}")
{
  Write-LogInfo "pnpm: package {{ $package_name | squote }} is already installed. Skipping."
} else
{
  Write-LogTask "Installing package {{ $package_name | squote }} via pnpm"
  Invoke-CommandExpression 'pnpm add -g "{{- $package_name -}}"'
}
# {{ end }}
