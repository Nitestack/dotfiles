# {{ template "pwsh-library.ps1" . }}

# ╭──────────────────────────────────────────────────────────╮
# │ Install essentials                                       │
# ╰──────────────────────────────────────────────────────────╯
Write-StartTask "Windows: Installing essential packages"

# {{ $os := .chezmoi.os }}
# {{ $essentialPackages := list }}
# {{ $essentialCustomPackages := list }}
# {{ range .packages.essentials }}
#   {{ if and (eq $os "windows") (hasKey . "win") }}
#     {{ if eq "string" (printf "%T" .win) }}
#       {{ $essentialPackages = mustAppend $essentialPackages .win }}
#     {{ else if .win.custom }}
#       {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .win.custom) }}
#     {{ end }}
#   {{ else if hasKey . "custom" }}
#     {{ $essentialCustomPackages = mustAppend $essentialCustomPackages (dict .name .custom) }}
#   {{ end }}
# {{ end }}

# ── winget ────────────────────────────────────────────────────────────
Write-Host "`nwinget:"
# {{ range ($essentialPackages | uniq) }}
$PackageName = (winget search -e "{{- . -}}" | Select-Object -Last 1).Split("{{- . -}}")[0].Trim()
Show-Spinner -StartMessage "$PackageName" -CompletionMessage "$PackageName" -ScriptBlock {
  winget list -e "{{- . -}}" | Out-Null
  if ($?) {
    $PackageName = (winget search -e "{{- . -}}" | Select-Object -Last 1).Split("{{- . -}}")[0].Trim()
    return ":$PackageName"
  }

  try {
    Invoke-Expression "winget install -e --accept-package-agreements --accept-source-agreements --id {{ . -}}"
  }
  catch {
    throw "Command failed: $_"
  }
}
# {{ end }}

# ── custom ────────────────────────────────────────────────────────────
Write-Host "`ncustom:"
# {{ range $essentialCustomPackages }}
# {{ range $cmd_name, $lines := . }}
Show-Spinner -StartMessage "{{- $cmd_name -}}" -CompletionMessage "{{- $cmd_name -}}" -ScriptBlock {
  if (Get-Command "{{- $cmd_name -}}" -ErrorAction SilentlyContinue) {
    return ":{{- $cmd_name -}}"
  }
  else {
    try {
      # {{ "\n" }}{{ $lines }}
    }
    catch {
      throw "Command failed: $_"
    }
  }
}
# {{ end }}
# {{ end }}

# ── volta ─────────────────────────────────────────────────────────────
Write-Host "`nvolta:"
# {{ range (.packages.volta | uniq) }}
Show-Spinner -StartMessage "{{- . -}}" -CompletionMessage "{{- . -}}" -ScriptBlock {
  $voltaList = volta list --format plain
  if ($voltaList -match "{{- . -}}") {
    return ":{{- . -}}"
  }
  else {
    try {
      Invoke-Expression "volta install {{ . -}}"
    }
    catch {
      throw "Command failed: $_"
    }
  }
}
# {{ end }}

Write-CompleteTask "Windows: Installed essential packages"

# ╭──────────────────────────────────────────────────────────╮
# │ Install packages                                         │
# ╰──────────────────────────────────────────────────────────╯
Write-StartTask "Windows: Installing packages"

# {{ $packages := list }}
# {{ $customPackages := list }}
# {{ range .packages.common }}
#   {{ if and (eq $os "win") (hasKey . "win") }}
#     {{ if eq "string" (printf "%T" .win) }}
#       {{ $packages = mustAppend $packages .win }}
#     {{ else if .win.custom }}
#       {{ $customPackages = mustAppend $customPackages (dict .name .win.custom) }}
#     {{ end }}
#   {{ else if hasKey . "custom" }}
#     {{ $customPackages = mustAppend $customPackages (dict .name .custom) }}
#   {{ end }}
# {{ end }}

# ── winget ────────────────────────────────────────────────────────────
Write-Host "`nwinget:"
# {{ range (concat $packages .packages.win.winget | uniq) }}
$PackageName = (winget search -e "{{- . -}}" | Select-Object -Last 1).Split("{{- . -}}")[0].Trim()
Show-Spinner -StartMessage "$PackageName" -CompletionMessage "$PackageName" -ScriptBlock {
  winget list -e "{{- . -}}" | Out-Null
  if ($?) {
    $PackageName = (winget search -e "{{- . -}}" | Select-Object -Last 1).Split("{{- . -}}")[0].Trim()
    return ":$PackageName"
  }

  try {
    Invoke-Expression "winget install -e --accept-package-agreements --accept-source-agreements --id {{ . -}}"
  }
  catch {
    throw "Command failed: $_"
  }
}
# {{ end }}

# ── PowerShell Gallery ────────────────────────────────────────────────
Write-Host "`nPowerShell Gallery:"
# {{ range (.packages.win.modules | uniq | sortAlpha) }}
Show-Spinner -StartMessage "{{- . -}}" -CompletionMessage "{{- . -}}" -ScriptBlock {
  if (Get-Module -ListAvailable -Name "{{- . -}}" -ErrorAction "SilentlyContinue") {
    return ":{{- . -}}"
  }

  try {
    Invoke-Expression "Install-Module -AcceptLicense -Name {{ . -}}"
  }
  catch {
    throw "Command failed: $_"
  }
}
# {{ end }}

# ── custom ────────────────────────────────────────────────────────────
Write-Host "`ncustom:"
# {{ range $_, $pkg := $customPackages }}
# {{ range $cmd_name, $lines := . }}
Show-Spinner -StartMessage "{{- $cmd_name -}}" -CompletionMessage "{{- $cmd_name -}}" -ScriptBlock {
  if (Get-Command "{{- $cmd_name -}}" -ErrorAction SilentlyContinue) {
    return ":{{- $cmd_name -}}"
  }
  else {
    try {
      # {{ "\n" }}{{ $lines }}
    }
    catch {
      throw "Command failed: $_"
    }
  }
}
# {{ end }}
# {{ end }}

# ── Global npm dependencies ───────────────────────────────────────────
Write-Host "`nnpm:"
# {{ range (.packages.npm | uniq | sortAlpha) }}
Show-Spinner -StartMessage "{{- . -}}" -CompletionMessage "{{- . -}}" -ScriptBlock {
  $pnpmList = pnpm list -g --depth 0
  if ($pnpmList -match "{{- . -}}") {
    return ":{{- . -}}"
  }
  else {
    try {
      Invoke-Expression "pnpm add -g {{ . -}}"
    }
    catch {
      throw "Command failed: $_"
    }
  }
}
# {{ end }}

# ── Global cargo crates ───────────────────────────────────────────────
Write-Host "`ncargo:"
# {{ range (.packages.cargo | uniq | sortAlpha) }}
Show-Spinner -StartMessage "{{- . -}}" -CompletionMessage "{{- . -}}" -ScriptBlock {
  $cargoList = cargo install --list
  if ($cargoList -match "{{- . -}}") {
    return ":{{- . -}}"
  }
  else {
    try {
      Invoke-Expression "cargo install {{ . -}}"
    }
    catch {
      throw "Command failed: $_"
    }
  }
}
# {{ end }}

Write-Host
Write-CompleteTask "Windows: Installed packages"
