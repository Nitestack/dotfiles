# {{ template "pwsh-library.ps1" . }}

_Log -l info "Starting the update process for Neovim and its plugins"

gum confirm "Proceed with the updates?" --default=false
if ($?) {
  bob update --all
  _Log -l info "Updated Neovim"

  Write-Host
  nvim --headless -c "Lazy! sync" +qa
  _Log -l info "Updated Neovim plugins"

  Write-Host
  nvim --headless -c "lua vim.schedule(function() vim.api.nvim_create_autocmd('User', { pattern = 'MasonToolsUpdateCompleted', command = 'qa' }); require('mason-tool-installer').check_install(true) end)"
  _Log -l info "Updated Mason packages"

  $SourcePath = chezmoi source-path
  $ConfigPath = "$env:LOCALAPPDATA\nvim"
  $CurrentPath = Get-Location

  Write-Host
  _Log -l info "Checking if lazy-lock.json has changed and commit"
  $LazyLockPath = (Get-ChildItem -Path $SourcePath -Filter "*lazy-lock.json" -File -Recurse | Select-Object -First 1).FullName
  if ([string]::IsNullOrEmpty($LazyLockPath)) {
    _Log -l error "Could not find lazy-lock.json file in $SourcePath"
    exit 1
  }
  $UpdatedLazyLockPath = (Get-ChildItem -Path $ConfigPath -Filter "*lazy-lock.json" -File | Select-Object -First 1).FullName
  if ([string]::IsNullOrEmpty($UpdatedLazyLockPath)) {
    _Log -l error "Could not find lazy-lock.json file in $ConfigPath"
    exit 1
  }
  Copy-Item -Path "$UpdatedLazyLockPath" -Destination "$LazyLockPath" -Force
  Set-Location "$(Resolve-Path "$(chezmoi source-path)/..")" || exit 1
  # Check if there are any changes
  Invoke-Expression "git diff --quiet -- $LazyLockPath"
  if ($LASTEXITCODE -eq 0) {
    _Log -l warn "No changes in lazy-lock.json file"
  }
  else {
    git add "$LazyLockPath"
    git commit "$LazyLockPath" -m "chore(nvim): update lazy-lock.json"
    Set-Location "$CurrentPath"
    _Log -l info "Committed updated lazy-lock.json file"
  }

  Write-Host
  _Log -l info "Checking if lazyvim.json has changed and commit"
  $LazyvimPath = (Get-ChildItem -Path $SourcePath -Filter "*lazyvim.json" -File -Recurse | Select-Object -First 1).FullName
  if ([string]::IsNullOrEmpty($LazyvimPath)) {
    _Log -l error "Could not find lazyvim.json file in $SourcePath"
    exit 1
  }
  $UpdatedLazyvimPath = (Get-ChildItem -Path $ConfigPath -Filter "*lazyvim.json" -File | Select-Object -First 1).FullName
  if ([string]::IsNullOrEmpty($UpdatedLazyvimPath)) {
    _Log -l error "Could not find lazyvim.json file in $ConfigPath"
    exit 1
  }
  Copy-Item -Path "$UpdatedLazyvimPath" -Destination "$LazyvimPath" -Force
  Set-Location "$(Resolve-Path "$(chezmoi source-path)/..")" || exit 1
  # Check if there are any changes
  Invoke-Expression "git diff --quiet -- $LazyvimPath"
  if ($LASTEXITCODE -eq 0) {
    return "No changes in lazyvim.json file"
  }
  else {
    git add "$LazyvimPath"
    git commit "$LazyvimPath" -m "chore(nvim): update lazyvim.json"
    Set-Location "$CurrentPath"
    _Log -l info "Committed updated lazyvim.json file"
  }

  _Log -l info "Completed updates"
}
else {
  _Log -l warn "Cancelled update process"
}
