Import-Module Terminal-Icons

Set-PSReadLineOption -PredictionSource History
Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward

# Aliases
if (Get-Command "nvim.exe" -ErrorAction SilentlyContinue)
{
  Set-Alias vim nvim.exe
  Set-Alias vi nvim.exe
  Set-Alias v nvim.exe
  Set-Alias c Clear-Host
}
Set-Alias lvim "$env:USERPROFILE\.local\bin\lvim.ps1"

# Find out if the current user identity is elevated (has admin rights)
$identity = [Security.Principal.WindowsIdentity]::GetCurrent()
$principal = New-Object Security.Principal.WindowsPrincipal $identity
$isAdmin = $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

# If so and the current host is a command line, then change to red color
# as warning to user that they are operating in an elevated context
# Useful shortcuts for traversing directories
function cd...
{
  Set-Location ..\..
}
function cd....
{
  Set-Location ..\..\..
}

function which($command)
{
  Get-Command -Name $command -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path -ErrorAction SilentlyContinue
}

function n()
{
  notepad $args
}

# Set up command prompt and window title. Use UNIX-style convention for identifying
# whether user is elevated (root) or not. Window title shows current version of PowerShell
# and appends [ADMIN] if appropriate for easy taskbar identification
function prompt
{
  if ($isAdmin)
  {
    "[" + (Get-Location) + "] # "
  } else
  {
    "[" + (Get-Location) + "] $ "
  }
}

$Host.UI.RawUI.WindowTitle = "PowerShell {0}" -f $PSVersionTable.PSVersion.ToString()
if ($isAdmin)
{
  $Host.UI.RawUI.WindowTitle += " [ADMIN]"
}

# Does the the rough equivalent of dir /s /b. For example, dirs *.png is dir /s /b *.png
function dirs
{
  if ($args.Count -gt 0)
  {
    Get-ChildItem -Recurse -Include "$args" | Foreach-Object FullName
  } else
  {
    Get-ChildItem -Recurse | Foreach-Object FullName
  }
}

# Simple function to start a new elevated process. If arguments are supplied then
# a single command is started with admin rights; if not then a new admin instance
# of PowerShell is started.
function admin
{
  if ($args.Count -gt 0)
  {
    $argList = "& '" + $args + "'"
    Start-Process "$PSHome\pwsh.exe" -Verb runAs -ArgumentList $argList
  } else
  {
    Start-Process "$PSHome\pwsh.exe" -Verb runAs
  }
}
# Set UNIX-like aliases for the admin command, so sudo <command> will run the command
# with elevated rights.
Set-Alias -Name su -Value admin
Set-Alias -Name sudo -Value admin

# Open PowerShell config with Neovim
function Open-PowerShellConfig()
{
  nvim.exe $env:USERPROFILE\Documents\PowerShell\Microsoft.PowerShell_profile.ps1
}
Set-Alias psc Open-PowerShellConfig

Remove-Variable identity, principal

Function Test-CommandExists
{
  Param ($command)
  $oldPreference = $ErrorActionPreference
  $ErrorActionPreference = 'SilentlyContinue'
  try
  {
    if (Get-Command $command)
    {
      return $true
    }
  } Catch
  {
    Write-Host "$command does not exist"; return $false
  } Finally
  {
    $ErrorActionPreference = $oldPreference
  }
}

# Linux utils
function ll()
{
  Get-ChildItem -Path $pwd -File
}
function la()
{
  Get-ChildItem -Force
}
function l()
{
  Get-ChildItem | Format-Wide -Column 4
}
function reload-profile
{
  & $profile
}
function find-file($name)
{
  Get-ChildItem -recurse -filter "*${name}*" -ErrorAction SilentlyContinue | ForEach-Object {
    $place_path = $_.directory
    Write-Output "${place_path}\${_}"
  }
}
function unzip($file)
{
  Write-Output("Extracting", $file, "to", $pwd)
  $fullFile = Get-ChildItem -Path $pwd -Filter .\cove.zip | ForEach-Object { $_.FullName }
  Expand-Archive -Path $fullFile -DestinationPath $pwd
}
function ix($file)
{
  curl.exe -F "f:1=@$file" ix.io
}
function grep($regex, $dir)
{
  if ($dir)
  {
    Get-ChildItem $dir | select-string $regex
    return
  }
  $input | select-string $regex
}
function touch($file)
{
  "" | Out-File $file -Encoding ASCII
}
function df
{
  get-volume
}
function sed($file, $find, $replace)
{
    (Get-Content $file).replace("$find", $replace) | Set-Content $file
}
function export($name, $value)
{
  set-item -force -path "env:$name" -value $value;
}
function pkill($name)
{
  Get-Process $name -ErrorAction SilentlyContinue | Stop-Process
}
function pgrep($name)
{
  Get-Process $name
}

$env:EDITOR = "{{- .editor -}}"

# Initialize oh-my-posh
oh-my-posh init pwsh --config "$env:APPDATA\oh-my-posh\theme.omp.yml" | Invoke-Expression

# Initialize zoxide (must stay at the end)
Invoke-Expression (& { (zoxide init --cmd cd powershell | Out-String) })
